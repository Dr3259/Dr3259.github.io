
// scripts/update-movie-data.mjs
import fs from 'fs';
import path from 'path';

const DATA_DIR = path.resolve(process.cwd(), 'data');
const OUTPUT_FILE_PATH = path.resolve(process.cwd(), 'src/lib/data/movie-heaven-data.ts');

function getRating(scoreString) {
  if (!scoreString || typeof scoreString !== 'string') return undefined;
  const match = scoreString.match(/^[0-9.]+/);
  return match ? match[0] : undefined;
}

function processData() {
  const primaryJsonPath = path.join(DATA_DIR, 'movies_2025.json');
  const fallbackJsonPath = path.join(DATA_DIR, 'movie-data.json');
  let rawData = [];

  try {
    if (fs.existsSync(primaryJsonPath)) {
      console.log('Processing movies_2025.json...');
      const fileContent = fs.readFileSync(primaryJsonPath, 'utf-8');
      const jsonData = JSON.parse(fileContent);
      
      rawData = jsonData.map(item => ({
        title: item.title,
        translated_name: item.translated_name,
        original_name: item.original_name,
        year: item.year,
        country: item.country,
        category: item.category,
        language: item.language,
        subtitles: item.subtitles,
        release_date: item.release_date,
        imdb_score: getRating(item.imdb_score),
        douban_score: getRating(item.douban_score),
        duration: item.duration,
        director: item.director,
        actors: item.actors,
        content: item.content,
        download_links: item.download_links || [],
      }));

    } else if (fs.existsSync(fallbackJsonPath)) {
      console.log('Processing movie-data.json...');
      const fileContent = fs.readFileSync(fallbackJsonPath, 'utf-8');
      rawData = JSON.parse(fileContent);
    } else {
      console.error('Error: No movie data JSON file found in /data directory.');
      return;
    }
    
    console.log(`Found ${rawData.length} movie entries.`);

    const tsContent = `
// This file is auto-generated by a script. Do not edit manually.
export interface MovieHeavenItem {
  title: string;
  translated_name?: string;
  original_name?: string;
  year?: string;
  country?: string;
  category?: string;
  language?: string;
  subtitles?: string;
  release_date?: string;
  imdb_score?: string;
  douban_score?: string;
  duration?: string;
  director?: string;
  actors?: string;
  content?: string;
  download_links: string[];
}

// Data sourced from local JSON file.
// To update, place your JSON in /data/ and run \`npm run update:movies\`
export const movieHeavenData: MovieHeavenItem[] = ${JSON.stringify(rawData, null, 2)};
`;

    fs.writeFileSync(OUTPUT_FILE_PATH, tsContent.trim());
    console.log(`Successfully updated movie data at: ${OUTPUT_FILE_PATH}`);

  } catch (error) {
    console.error('Failed to update movie data:', error);
  }
}

processData();

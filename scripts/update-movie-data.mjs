
import fs from 'fs';
import path from 'path';

// --- Configuration ---
const DATA_DIR = 'data';
const OUTPUT_FILE = 'src/lib/data/movie-heaven-data.ts';
const DATA_SOURCES = ['movies_2025.json', 'movie-data.json']; // Prioritized list

// --- Helper Functions ---

/**
 * Finds the first valid data source from the prioritized list.
 * @returns {string|null} The path to the valid data source or null if none found.
 */
function findValidDataSource() {
  for (const sourceFile of DATA_SOURCES) {
    const sourcePath = path.join(DATA_DIR, sourceFile);
    if (fs.existsSync(sourcePath)) {
      console.log(`Found data source: ${sourcePath}`);
      return sourcePath;
    }
  }
  console.warn('No valid data source found in /data directory.');
  return null;
}

/**
 * Extracts a score value (like 6.1) from a string (like "6.1/10 from 7049 users").
 * @param {string | undefined} scoreString The string containing the score.
 * @returns {string | undefined} The extracted score or undefined.
 */
function extractScore(scoreString) {
    if (!scoreString) return undefined;
    const match = scoreString.match(/^[0-9.]+/);
    return match ? match[0] : undefined;
}


/**
 * Processes a single raw movie entry and maps it to the MovieHeavenItem format.
 * @param {any} rawEntry The raw data entry from the JSON file.
 * @returns {any} A processed movie item.
 */
function processMovieEntry(rawEntry) {
  return {
    title: rawEntry.title || 'Untitled',
    download_links: rawEntry.download_links || [],
    imdb_score: extractScore(rawEntry.imdb_score),
    douban_score: extractScore(rawEntry.douban_score),
    category: rawEntry.category,
    content: rawEntry.content,
    translated_name: rawEntry.translated_name,
    original_name: rawEntry.original_name,
    year: rawEntry.year,
    country: rawEntry.country,
    language: rawEntry.language,
    subtitles: rawEntry.subtitles,
    release_date: rawEntry.release_date,
    duration: rawEntry.duration,
    director: rawEntry.director,
    actors: rawEntry.actors,
  };
}

// --- Main Script ---

console.log('Starting movie data update...');

const dataSourcePath = findValidDataSource();

if (!dataSourcePath) {
  console.error('Operation cancelled: No data source file found.');
  process.exit(1);
}

let rawData;
try {
  rawData = JSON.parse(fs.readFileSync(dataSourcePath, 'utf-8'));
  if (!Array.isArray(rawData)) {
    throw new Error("Data source is not a JSON array.");
  }
} catch (error) {
  console.error(`Error reading or parsing ${dataSourcePath}:`, error);
  process.exit(1);
}

const processedData = rawData.map(processMovieEntry);

const fileContent = `
// This file is auto-generated by a script. Do not edit manually.
export interface MovieHeavenItem {
  title: string;
  translated_name?: string;
  original_name?: string;
  year?: string;
  country?: string;
  category?: string;
  language?: string;
  subtitles?: string;
  release_date?: string;
  imdb_score?: string;
  douban_score?: string;
  duration?: string;
  director?: string;
  actors?: string;
  content?: string;
  download_links: string[];
}

// Data sourced from local JSON file.
// To update, place your JSON in /data/ and run \`npm run update:movies\`
export const movieHeavenData: MovieHeavenItem[] = ${JSON.stringify(processedData, null, 2)};
`;

try {
  fs.writeFileSync(OUTPUT_FILE, fileContent.trim());
  console.log(`âœ… Successfully updated ${OUTPUT_FILE} with ${processedData.length} entries from ${dataSourcePath}.`);
} catch (error) {
  console.error(`Error writing to ${OUTPUT_FILE}:`, error);
  process.exit(1);
}

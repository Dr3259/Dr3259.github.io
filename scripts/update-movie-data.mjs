
import fs from 'fs';
import path from 'path';

// Define paths
const dataDir = path.resolve(process.cwd(), 'data');
const sourceJsonPath = path.resolve(dataDir, 'movie-data.json');
const targetTsPath = path.resolve(process.cwd(), 'src', 'lib', 'data', 'movie-heaven-data.ts');

function updateMovieData() {
  // 1. Ensure data directory exists
  if (!fs.existsSync(dataDir)) {
    console.log(`Creating data directory at: ${dataDir}`);
    fs.mkdirSync(dataDir, { recursive: true });
  }

  // 2. Check if source JSON exists
  if (!fs.existsSync(sourceJsonPath)) {
    console.error(`Error: Source file not found at ${sourceJsonPath}`);
    console.log('Please place your JSON file named "movie-data.json" in the "/data" directory at the root of the project.');
    // Optional: Create a placeholder file if it doesn't exist
    fs.writeFileSync(
        sourceJsonPath, 
        JSON.stringify([{ title: "Placeholder Movie", download_links: [] }], null, 2), 
        'utf-8'
    );
    console.log('A placeholder "movie-data.json" file has been created for you.');
    return;
  }

  try {
    // 3. Read and parse the JSON file
    console.log(`Reading data from ${sourceJsonPath}...`);
    const jsonData = fs.readFileSync(sourceJsonPath, 'utf-8');
    const data = JSON.parse(jsonData);

    if (!Array.isArray(data)) {
        throw new Error('JSON data is not an array.');
    }

    // 4. Format the data into a TypeScript module
    const tsContent = `
export interface MovieHeavenItem {
  title: string;
  download_links: string[];
  imdb_score?: string;
  category?: string;
  content?: string;
}

// This file is auto-generated by scripts/update-movie-data.mjs
// Do not edit this file directly.
export const movieHeavenData: MovieHeavenItem[] = ${JSON.stringify(data, null, 2)};
`;

    // 5. Write the content to the target TypeScript file
    console.log(`Writing data to ${targetTsPath}...`);
    fs.writeFileSync(targetTsPath, tsContent.trim(), 'utf-8');

    console.log(`\n✅ Successfully updated movie data!`);
    console.log(`${data.length} movies loaded.`);

  } catch (error) {
    console.error('\n❌ An error occurred during the update process:');
    console.error(error);
    process.exit(1);
  }
}

updateMovieData();

#!/usr/bin/env node

import fs from 'fs';
import path from 'path';

// Define paths
const DATA_DIR = path.join(process.cwd(), 'data');
const OUTPUT_FILE = path.join(process.cwd(), 'src', 'lib', 'data', 'movie-heaven-data.ts');
const PREFERRED_SOURCE = path.join(DATA_DIR, 'movies_2025.json');
const LEGACY_SOURCE = path.join(DATA_DIR, 'movie-data-test.json');

console.log('Starting movie data update...');
console.log(`Data directory: ${DATA_DIR}`);
console.log(`Output file: ${OUTPUT_FILE}`);

let movies = [];
let sourceFile = '';

// Determine which JSON source to use
if (fs.existsSync(PREFERRED_SOURCE)) {
  console.log(`Found preferred data source: ${PREFERRED_SOURCE}`);
  sourceFile = PREFERRED_SOURCE;
} else if (fs.existsSync(LEGACY_SOURCE)) {
  console.log(`Preferred source not found. Using legacy data source: ${LEGACY_SOURCE}`);
  sourceFile = LEGACY_SOURCE;
} else {
  console.error('Error: No movie data file found in /data directory.');
  console.error(`Looked for ${PREFERRED_SOURCE} and ${LEGACY_SOURCE}`);
  process.exit(1);
}

try {
  const jsonData = fs.readFileSync(sourceFile, 'utf8');
  movies = JSON.parse(jsonData);
  console.log(`Successfully read and parsed ${movies.length} movies from ${sourceFile}.`);
} catch (error) {
  console.error(`Error reading or parsing ${sourceFile}:`, error);
  process.exit(1);
}


// --- Data Transformation ---
const transformed = movies.map(movie => ({
  title: movie.title || movie.translated_name,
  download_links: movie.download_links,
  imdb_score: movie.imdb_score?.match(/(\d+\.\d+)/)?.[1] || undefined,
  douban_score: movie.douban_score?.match(/(\d+\.\d+)/)?.[1] || undefined,
  category: movie.category,
  content: movie.content,
  
  // Add all new fields here
  translated_name: movie.translated_name,
  original_name: movie.original_name,
  year: movie.year,
  country: movie.country,
  language: movie.language,
  subtitles: movie.subtitles,
  release_date: movie.release_date,
  duration: movie.duration,
  director: movie.director,
  actors: movie.actors
}));

const fileContent = `
// This file is auto-generated by a script. Do not edit manually.
export interface MovieHeavenItem {
  title: string;
  translated_name?: string;
  original_name?: string;
  year?: string;
  country?: string;
  category?: string;
  language?: string;
  subtitles?: string;
  release_date?: string;
  imdb_score?: string;
  douban_score?: string;
  duration?: string;
  director?: string;
  actors?: string;
  content?: string;
  download_links: string[];
}

// Data sourced from local JSON file.
// To update, place your JSON in /data/ and run \`npm run update:movies\`
export const movieHeavenData: MovieHeavenItem[] = ${JSON.stringify(transformed, null, 2)};
`;

try {
  fs.writeFileSync(OUTPUT_FILE, fileContent.trim());
  console.log(`Successfully wrote ${transformed.length} movie records to ${OUTPUT_FILE}.`);
  console.log('Movie data update complete!');
} catch (error) {
  console.error(`Error writing to ${OUTPUT_FILE}:`, error);
  process.exit(1);
}
